package actions

import (

  "fmt"
  "net/http"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/pop"
  "bribebybytes.in/gameaholic/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Achievement)
// DB Table: Plural (achievements)
// Resource: Plural (Achievements)
// Path: Plural (/achievements)
// View Template Folder: Plural (/templates/achievements/)

// AchievementsResource is the resource for the Achievement model
type AchievementsResource struct{
  buffalo.Resource
}

// List gets all Achievements. This function is mapped to the path
// GET /achievements
func (v AchievementsResource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  achievements := &models.Achievements{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all Achievements from the DB
  if err := q.All(achievements); err != nil {
    return err
  }

  // Add the paginator to the context so it can be used in the template.
  c.Set("pagination", q.Paginator)

  return c.Render(http.StatusOK, r.Auto(c, achievements))
}

// Show gets the data for one Achievement. This function is mapped to
// the path GET /achievements/{achievement_id}
func (v AchievementsResource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Achievement
  achievement := &models.Achievement{}

  // To find the Achievement the parameter achievement_id is used.
  if err := tx.Find(achievement, c.Param("achievement_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  return c.Render(http.StatusOK, r.Auto(c, achievement))
}

// New renders the form for creating a new Achievement.
// This function is mapped to the path GET /achievements/new
func (v AchievementsResource) New(c buffalo.Context) error {
  return c.Render(http.StatusOK, r.Auto(c, &models.Achievement{}))
}
// Create adds a Achievement to the DB. This function is mapped to the
// path POST /achievements
func (v AchievementsResource) Create(c buffalo.Context) error {
  // Allocate an empty Achievement
  achievement := &models.Achievement{}

  // Bind achievement to the html form elements
  if err := c.Bind(achievement); err != nil {
    return err
  }

  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate(achievement)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the new.html template that the user can
    // correct the input.
    return c.Render(http.StatusUnprocessableEntity, r.Auto(c, achievement))
  }

  // If there are no errors set a success message
  c.Flash().Add("success", T.Translate(c, "achievement.created.success"))
  // and redirect to the achievements index page
  return c.Render(http.StatusCreated, r.Auto(c, achievement))
}

// Edit renders a edit form for a Achievement. This function is
// mapped to the path GET /achievements/{achievement_id}/edit
func (v AchievementsResource) Edit(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Achievement
  achievement := &models.Achievement{}

  if err := tx.Find(achievement, c.Param("achievement_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  return c.Render(http.StatusOK, r.Auto(c, achievement))
}
// Update changes a Achievement in the DB. This function is mapped to
// the path PUT /achievements/{achievement_id}
func (v AchievementsResource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Achievement
  achievement := &models.Achievement{}

  if err := tx.Find(achievement, c.Param("achievement_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  // Bind Achievement to the html form elements
  if err := c.Bind(achievement); err != nil {
    return err
  }

  verrs, err := tx.ValidateAndUpdate(achievement)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the edit.html template that the user can
    // correct the input.
    return c.Render(http.StatusUnprocessableEntity, r.Auto(c, achievement))
  }

  // If there are no errors set a success message
  c.Flash().Add("success", T.Translate(c, "achievement.updated.success"))
  // and redirect to the achievements index page
  return c.Render(http.StatusOK, r.Auto(c, achievement))
}

// Destroy deletes a Achievement from the DB. This function is mapped
// to the path DELETE /achievements/{achievement_id}
func (v AchievementsResource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Achievement
  achievement := &models.Achievement{}

  // To find the Achievement the parameter achievement_id is used.
  if err := tx.Find(achievement, c.Param("achievement_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  if err := tx.Destroy(achievement); err != nil {
    return err
  }

  // If there are no errors set a flash message
  c.Flash().Add("success", T.Translate(c, "achievement.destroyed.success"))
  // Redirect to the achievements index page
  return c.Render(http.StatusOK, r.Auto(c, achievement))
}
