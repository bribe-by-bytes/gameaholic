package actions

import (
	"fmt"
	"net/http"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"bribebybytes.in/gameaholic/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (PersonalAchievement)
// DB Table: Plural (personal_achievements)
// Resource: Plural (PersonalAchievements)
// Path: Plural (/personal_achievements)
// View Template Folder: Plural (/templates/personal_achievements/)

// PersonalAchievementsResource is the resource for the PersonalAchievement model
type PersonalAchievementsResource struct {
	buffalo.Resource
}

// List gets all PersonalAchievements. This function is mapped to the path
// GET /personal_achievements
func (v PersonalAchievementsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	personalAchievements := &models.PersonalAchievements{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all PersonalAchievements from the DB
	if err := q.All(personalAchievements); err != nil {
		return err
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(http.StatusOK, r.Auto(c, personalAchievements))
}

// Show gets the data for one PersonalAchievement. This function is mapped to
// the path GET /personal_achievements/{personal_achievement_id}
func (v PersonalAchievementsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty PersonalAchievement
	personalAchievement := &models.PersonalAchievement{}

	// To find the PersonalAchievement the parameter personal_achievement_id is used.
	if err := tx.Find(personalAchievement, c.Param("personal_achievement_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return c.Render(http.StatusOK, r.Auto(c, personalAchievement))
}

// New renders the form for creating a new PersonalAchievement.
// This function is mapped to the path GET /personal_achievements/new
func (v PersonalAchievementsResource) New(c buffalo.Context) error {
	return c.Render(http.StatusOK, r.Auto(c, &models.PersonalAchievement{}))
}

// Create adds a PersonalAchievement to the DB. This function is mapped to the
// path POST /personal_achievements
func (v PersonalAchievementsResource) Create(c buffalo.Context) error {
	// Allocate an empty PersonalAchievement
	personalAchievement := &models.PersonalAchievement{}

	// Bind personalAchievement to the html form elements
	if err := c.Bind(personalAchievement); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(personalAchievement)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(http.StatusUnprocessableEntity, r.Auto(c, personalAchievement))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "personalAchievement.created.success"))
	// and redirect to the personal_achievements index page
	return c.Render(http.StatusCreated, r.Auto(c, personalAchievement))
}

// Edit renders a edit form for a PersonalAchievement. This function is
// mapped to the path GET /personal_achievements/{personal_achievement_id}/edit
func (v PersonalAchievementsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty PersonalAchievement
	personalAchievement := &models.PersonalAchievement{}

	if err := tx.Find(personalAchievement, c.Param("personal_achievement_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	return c.Render(http.StatusOK, r.Auto(c, personalAchievement))
}

// Update changes a PersonalAchievement in the DB. This function is mapped to
// the path PUT /personal_achievements/{personal_achievement_id}
func (v PersonalAchievementsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty PersonalAchievement
	personalAchievement := &models.PersonalAchievement{}

	if err := tx.Find(personalAchievement, c.Param("personal_achievement_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	// Bind PersonalAchievement to the html form elements
	if err := c.Bind(personalAchievement); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(personalAchievement)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(http.StatusUnprocessableEntity, r.Auto(c, personalAchievement))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", T.Translate(c, "personalAchievement.updated.success"))
	// and redirect to the personal_achievements index page
	return c.Render(http.StatusOK, r.Auto(c, personalAchievement))
}

// Destroy deletes a PersonalAchievement from the DB. This function is mapped
// to the path DELETE /personal_achievements/{personal_achievement_id}
func (v PersonalAchievementsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty PersonalAchievement
	personalAchievement := &models.PersonalAchievement{}

	// To find the PersonalAchievement the parameter personal_achievement_id is used.
	if err := tx.Find(personalAchievement, c.Param("personal_achievement_id")); err != nil {
		return c.Error(http.StatusNotFound, err)
	}

	if err := tx.Destroy(personalAchievement); err != nil {
		return err
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", T.Translate(c, "personalAchievement.destroyed.success"))
	// Redirect to the personal_achievements index page
	return c.Render(http.StatusOK, r.Auto(c, personalAchievement))
}
